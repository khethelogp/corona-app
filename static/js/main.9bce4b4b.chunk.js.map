{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","start","end","value","duration","separator","Date","toDateString","variant","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","alt","src","coronaImage","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bce4b4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2RpdV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2BICZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1184B\",\"card\":\"Cards_card__3kRs5\",\"infected\":\"Cards_infected___2SWZ\",\"recovered\":\"Cards_recovered__JRrOe\",\"deaths\":\"Cards_deaths__UbRd5\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate} }) => {\r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>    \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography color=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5}separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>   \r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>    \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography color=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5}separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>   \r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>    \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"  gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography color=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5}separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Deaths caused by Covid-19\r\n                        </Typography>\r\n                    </CardContent>   \r\n                </Grid>\r\n            </ Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData =  async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n        \r\n        return {confirmed, recovered, deaths, lastUpdate, };\r\n    } catch (error) {\r\n        console.log(error); \r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error); \r\n    }\r\n}\r\n\r\nexport const fetchCountries =  async () => {\r\n    try {\r\n        const {data: { countries }} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name)\r\n    } catch (error) {\r\n        console.log(error); \r\n    }\r\n}\r\n\r\n","import React,{useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ( { data: {confirmed, recovered, deaths}, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? (\r\n        <Line \r\n            data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#333fff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({ deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />): null\r\n\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed \r\n        ? (\r\n            <Bar \r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data: [ confirmed.value, recovered.value, deaths.value ]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ${country}`},\r\n                }}            \r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api'\r\n\r\nconst CountryPicker = ( { handleCountryChange } ) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => (handleCountryChange(e.target.value))}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\n\r\n// import Cards from './components/Cards/Cards';\r\n// import Chart from './components/Chart/Chart';\r\n// import CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        \r\n        this.setState({ data:fetchedData });\r\n    }\r\n\r\n\r\n    handleCountryChange = async (country) => {\r\n        //fetch the data\r\n        const fetchedData = await fetchData(country);\r\n        console.log(fetchedData);\r\n\r\n        //set state\r\n        this.setState({ data:fetchedData , country: country });\r\n    }\r\n\r\n    render(){\r\n        const {data, country} = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} alt=\"COVID-19\" src={coronaImage}/>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './App'\r\n\r\nReactDom.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3kR1A\",\"image\":\"App_image__19kFY\"};"],"sourceRoot":""}